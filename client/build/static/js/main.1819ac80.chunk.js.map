{"version":3,"sources":["components/userCard.js","components/User.js","components/postCard.js","components/Post.js","App.js","serviceWorker.js","index.js"],"names":["Card","styled","div","UserCard","props","name","Users","console","log","process","userArray","map","user","key","id","PostCard","text","userId","find","Post","useState","postArray","setPostArray","useEffect","axios","get","then","res","data","catch","error","message","post","user_id","baseUrl","App","setUserArray","className","to","exact","path","render","User","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kfAGA,IAAMA,EAAOC,IAAOC,IAAV,KAsBKC,EAdE,SAACC,GAAW,IAClBC,EAAQD,EAARC,KAEP,OACI,kBAACL,EAAD,KACI,4BAAKK,GACL,6BACA,wCACA,6CCAGC,EAdD,SAACF,GAKX,OAJAG,QAAQC,IAAIC,cACML,EAAMM,UAIVC,KAAI,SAAAC,GAAI,OAClB,yBAAKC,IAAKD,EAAKE,IACX,kBAAC,EAAD,CAAUT,KAAMO,EAAKP,Y,kNCVjC,IAAML,EAAOC,IAAOC,IAAV,KAyBKa,EAjBE,SAACX,GAAW,IAClBY,EAA2BZ,EAA3BY,KAAMC,EAAqBb,EAArBa,OAEPL,EAF4BR,EAAbM,UAEEQ,MAAK,qBAAEJ,KAAeG,KAE7C,OACI,kBAAC,EAAD,KACI,4BAAKD,GACL,4BAAKJ,EAAKP,MACV,6BACA,wCACA,6CCWGc,EAzBF,SAACf,GACVG,QAAQC,IAAIC,cACZ,IAAMC,EAAYN,EAAMM,UAFJ,EAGcU,mBAAS,IAHvB,mBAGbC,EAHa,KAGFC,EAHE,KAgBpB,OAXAC,qBAAU,WACNC,IAAMC,IAAc,cACfC,MAAK,SAAAC,GACFL,EAAaK,EAAIC,SAEpBC,OAAM,SAAAC,GACHvB,QAAQC,IAAIsB,EAAMC,cAE3B,IAICV,EAAUV,KAAI,SAAAqB,GAAI,OAClB,yBAAKnB,IAAKmB,EAAKlB,IACX,kBAAC,EAAD,CAAUE,KAAMgB,EAAKhB,KAAMC,OAAQe,EAAKC,QAASvB,UAAWA,SCnBlEwB,EAA6E,GA4BpEC,MA1Bf,WAAgB,IAAD,EACqBf,mBAAS,IAD9B,mBACNV,EADM,KACK0B,EADL,KAcb,OAXAb,qBAAU,WACRC,IAAMC,IAAIS,EAAU,cACfR,MAAK,SAAAC,GACFS,EAAaT,EAAIC,SAEpBC,OAAM,SAAAC,GACHvB,QAAQC,IAAIsB,EAAMC,cAEzB,IAID,yBAAKM,UAAU,OACb,6BACE,kBAAC,IAAD,CAAMC,GAAK,KAAX,SACA,kBAAC,IAAD,CAAMA,GAAK,UAAX,UAEF,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,OAAQ,SAACrC,GAAD,OAAW,kBAACsC,EAAD,iBAAWtC,EAAX,CAAkBM,UAAWA,QACtE,kBAAC,IAAD,CAAO8B,KAAK,SAASC,OAAQ,SAACrC,GAAD,OAAW,kBAAC,EAAD,iBAAUA,EAAV,CAAiBM,UAAWA,UCnBtDiC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASP,OAAO,kBAAC,IAAD,KACZ,kBAAC,EAAD,OACWQ,SAASC,eAAe,SDwHjC,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3B,MAAK,SAAA4B,GACjCA,EAAaC,kB","file":"static/js/main.1819ac80.chunk.js","sourcesContent":["import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst Card = styled.div`\r\n    padding: 1em;\r\n    margin: 1.5em;\r\n    display: flex;\r\n    flex-direction: column;\r\n    flex-basis: 20%;\r\n    background-color: pink;`\r\n\r\nconst UserCard = (props) => {\r\n    const {name} = props;\r\n    \r\n    return (\r\n        <Card>\r\n            <h2>{name}</h2>\r\n            <div>\r\n            <button>edit</button>\r\n            <button>delete</button>\r\n            </div>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default UserCard;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport UserCard from './userCard';\r\n\r\n\r\nconst Users = (props) => {\r\n    console.log(process.env.NODE_ENV)\r\n    const userArray = props.userArray;\r\n\r\n\r\n    return (\r\n        userArray.map(user => \r\n        <div key={user.id}>\r\n            <UserCard name={user.name}/>\r\n        </div>    \r\n        )\r\n    )\r\n}\r\n\r\nexport default Users;","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst Card = styled.div`\r\n    padding: 1em;\r\n    margin: 1.5em;\r\n    display: flex;\r\n    flex-direction: column;\r\n    flex-basis: 20%;\r\n    background-color: yellow;`\r\n\r\nconst PostCard = (props) => {\r\n    const {text, userId, userArray} = props;\r\n\r\n    const user = userArray.find(({id}) => id === userId)\r\n    \r\n    return (\r\n        <Card>\r\n            <h3>{text}</h3>\r\n            <h5>{user.name}</h5>\r\n            <div>\r\n            <button>edit</button>\r\n            <button>delete</button>\r\n            </div>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default PostCard;","import React, {useState, useEffect} from 'react';\r\nimport axios from 'axios';\r\nimport styled from 'styled-components';\r\nimport PostCard from './postCard';\r\n\r\nconst baseUrl = process.env.NODE_ENV === 'development' ? 'http://localhost:4000' : ''\r\n\r\n\r\nconst Post = (props) => {\r\n    console.log(process.env.NODE_ENV)\r\n    const userArray = props.userArray;\r\n    const [postArray, setPostArray] = useState([])\r\n\r\n    useEffect(() => {\r\n        axios.get(baseUrl + '/api/posts')\r\n            .then(res => {\r\n                setPostArray(res.data)\r\n            })\r\n            .catch(error => {\r\n                console.log(error.message)\r\n            })\r\n    }, [])\r\n\r\n\r\n    return (\r\n        postArray.map(post => \r\n        <div key={post.id}>\r\n            <PostCard text={post.text} userId={post.user_id} userArray={userArray}/>\r\n        </div>    \r\n        )\r\n    )\r\n}\r\n\r\nexport default Post;","import React, {useState, useEffect} from 'react';\nimport { Route } from 'react-router-dom';\nimport axios from 'axios';\nimport './App.css';\nimport { Link } from 'react-router-dom';\nimport Users from './components/User';\nimport Post from './components/Post';\n\nconst baseUrl = process.env.NODE_ENV === 'development' ? 'http://localhost:4000' : ''\n\nfunction App() {\n  const [userArray, setUserArray] = useState([])\n\n  useEffect(() => {\n    axios.get(baseUrl + '/api/users')\n        .then(res => {\n            setUserArray(res.data)\n        })\n        .catch(error => {\n            console.log(error.message)\n        })\n  }, [])\n\n\n  return (\n    <div className=\"App\">\n      <div>\n        <Link to ={'/'}>Users</Link>\n        <Link to ={'/posts'}>Posts</Link>\n      </div>\n      <Route exact path=\"/\" render={(props) => <Users {...props} userArray={userArray}/>}/>\n      <Route path=\"/posts\" render={(props) => <Post {...props} userArray={userArray}/>}/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter as Router} from 'react-router-dom';\n\nReactDOM.render(<Router>\n    <App />\n    </Router>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}