{"version":3,"sources":["components/userCard.js","components/User.js","components/postCard.js","components/Post.js","App.js","serviceWorker.js","index.js"],"names":["Card","styled","div","UserCard","props","name","Users","getUsers","console","log","process","userArray","initialValues","onSubmit","formValues","actions","axios","post","then","res","resetForm","catch","err","message","render","type","placeholder","map","user","key","id","PostCard","text","userId","find","Post","useState","postArray","setPostArray","useEffect","get","data","error","user_id","baseUrl","App","setUserArray","className","to","exact","path","User","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mfAGA,IAAMA,EAAOC,IAAOC,IAAV,KAsBKC,EAdE,SAACC,GAAW,IAClBC,EAAQD,EAARC,KAEP,OACI,kBAACL,EAAD,KACI,4BAAKK,GACL,6BACA,wCACA,6C,QCwCGC,EAlDD,SAACF,GAAW,IACfG,EAAYH,EAAZG,SACPC,QAAQC,IAAIC,cACZ,IAAMC,EAAYP,EAAMO,UAexB,OACI,6BACA,6BAEI,kBAAC,IAAD,CACAC,cAAe,CAACP,KAAM,IACtBQ,SAnBQ,SAACC,EAAYC,GACzBC,IAAMC,KAAe,cAAe,CAACZ,KAAMS,EAAWT,OACjDa,MAAK,SAAAC,GACFJ,EAAQK,YACRb,OAEHc,OAAM,SAAAC,GACHd,QAAQC,IAAIa,EAAIC,aAapBC,OAAQ,kBACJ,kBAAC,IAAD,KACA,6BACI,kBAAC,IAAD,CAAOnB,KAAK,OAAOoB,KAAK,OAAOC,YAAY,cAE/C,6BACI,2BAAOD,KAAK,iBASxBd,EAAUgB,KAAI,SAAAC,GAAI,OAClB,yBAAKC,IAAKD,EAAKE,IACX,kBAAC,EAAD,CAAUzB,KAAMuB,EAAKvB,KAAMyB,GAAIF,EAAKE,GAAIvB,SAAUA,U,kNChD9D,IAAMP,EAAOC,IAAOC,IAAV,KAyBK6B,EAjBE,SAAC3B,GAAW,IAClB4B,EAA2B5B,EAA3B4B,KAAMC,EAAqB7B,EAArB6B,OAEPL,EAF4BxB,EAAbO,UAEEuB,MAAK,qBAAEJ,KAAeG,KAE7C,OACI,kBAAC,EAAD,KACI,4BAAKD,GACL,4BAAKJ,EAAKvB,MACV,6BACA,wCACA,6CCWG8B,EAzBF,SAAC/B,GACVI,QAAQC,IAAIC,cACZ,IAAMC,EAAYP,EAAMO,UAFJ,EAGcyB,mBAAS,IAHvB,mBAGbC,EAHa,KAGFC,EAHE,KAgBpB,OAXAC,qBAAU,WACNvB,IAAMwB,IAAc,cACftB,MAAK,SAAAC,GACFmB,EAAanB,EAAIsB,SAEpBpB,OAAM,SAAAqB,GACHlC,QAAQC,IAAIiC,EAAMnB,cAE3B,IAICc,EAAUV,KAAI,SAAAV,GAAI,OAClB,yBAAKY,IAAKZ,EAAKa,IACX,kBAAC,EAAD,CAAUE,KAAMf,EAAKe,KAAMC,OAAQhB,EAAK0B,QAAShC,UAAWA,SCnBlEiC,EAA6E,GAgCpEC,MA9Bf,WAAgB,IAAD,EACqBT,mBAAS,IAD9B,mBACNzB,EADM,KACKmC,EADL,KAGPvC,EAAW,WACfS,IAAMwB,IAAII,EAAU,cACnB1B,MAAK,SAAAC,GACF2B,EAAa3B,EAAIsB,SAEpBpB,OAAM,SAAAqB,GACHlC,QAAQC,IAAIiC,EAAMnB,aASxB,OALAgB,qBAAU,WACRhC,MACC,IAID,yBAAKwC,UAAU,OACb,6BACE,kBAAC,IAAD,CAAMC,GAAK,KAAX,SACA,kBAAC,IAAD,CAAMA,GAAK,UAAX,UAEF,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAI1B,OAAQ,SAACpB,GAAD,OAAW,kBAAC+C,EAAD,iBAAW/C,EAAX,CAAkBO,UAAWA,EAAWJ,SAAUA,QAC3F,kBAAC,IAAD,CAAO2C,KAAK,SAAS1B,OAAQ,SAACpB,GAAD,OAAW,kBAAC,EAAD,iBAAUA,EAAV,CAAiBO,UAAWA,EAAWJ,SAAUA,UCvB3E6C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASjC,OAAO,kBAAC,IAAD,KACZ,kBAAC,EAAD,OACWkC,SAASC,eAAe,SDwHjC,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM5C,MAAK,SAAA6C,GACjCA,EAAaC,kB","file":"static/js/main.ef3eff97.chunk.js","sourcesContent":["import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst Card = styled.div`\r\n    padding: 1em;\r\n    margin: 1.5em;\r\n    display: flex;\r\n    flex-direction: column;\r\n    flex-basis: 20%;\r\n    background-color: pink;`\r\n\r\nconst UserCard = (props) => {\r\n    const {name} = props;\r\n    \r\n    return (\r\n        <Card>\r\n            <h2>{name}</h2>\r\n            <div>\r\n            <button>edit</button>\r\n            <button>delete</button>\r\n            </div>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default UserCard;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport UserCard from './userCard';\r\nimport { Formik, Form, Field } from 'formik';\r\nimport axios from 'axios';\r\n\r\nconst baseUrl = process.env.NODE_ENV === 'development' ? 'http://localhost:4000' : ''\r\n\r\n\r\nconst Users = (props) => {\r\n    const {getUsers} = props;\r\n    console.log(process.env.NODE_ENV)\r\n    const userArray = props.userArray;\r\n\r\n    const addUser = (formValues, actions) => {\r\n        axios.post(baseUrl + '/api/users/', {name: formValues.name})\r\n            .then(res => {\r\n                actions.resetForm();\r\n                getUsers();\r\n            })\r\n            .catch(err => {\r\n                console.log(err.message)\r\n            })\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n        <div>\r\n        {\r\n            <Formik\r\n            initialValues={{name: ''}}\r\n            onSubmit={addUser}\r\n            render={() => (\r\n                <Form>\r\n                <div>\r\n                    <Field name='name' type=\"text\" placeholder='Add Name' />\r\n                </div>\r\n                <div>\r\n                    <input type='submit' />\r\n                </div>\r\n                </Form>\r\n            )}\r\n        />\r\n\r\n        }\r\n        </div>\r\n        {\r\n        userArray.map(user => \r\n        <div key={user.id}>\r\n            <UserCard name={user.name} id={user.id} getUsers={getUsers}/>\r\n        </div>    \r\n        )\r\n        }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Users;","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst Card = styled.div`\r\n    padding: 1em;\r\n    margin: 1.5em;\r\n    display: flex;\r\n    flex-direction: column;\r\n    flex-basis: 20%;\r\n    background-color: yellow;`\r\n\r\nconst PostCard = (props) => {\r\n    const {text, userId, userArray} = props;\r\n\r\n    const user = userArray.find(({id}) => id === userId)\r\n    \r\n    return (\r\n        <Card>\r\n            <h3>{text}</h3>\r\n            <h5>{user.name}</h5>\r\n            <div>\r\n            <button>edit</button>\r\n            <button>delete</button>\r\n            </div>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default PostCard;","import React, {useState, useEffect} from 'react';\r\nimport axios from 'axios';\r\nimport styled from 'styled-components';\r\nimport PostCard from './postCard';\r\n\r\nconst baseUrl = process.env.NODE_ENV === 'development' ? 'http://localhost:4000' : ''\r\n\r\n\r\nconst Post = (props) => {\r\n    console.log(process.env.NODE_ENV)\r\n    const userArray = props.userArray;\r\n    const [postArray, setPostArray] = useState([])\r\n\r\n    useEffect(() => {\r\n        axios.get(baseUrl + '/api/posts')\r\n            .then(res => {\r\n                setPostArray(res.data)\r\n            })\r\n            .catch(error => {\r\n                console.log(error.message)\r\n            })\r\n    }, [])\r\n\r\n\r\n    return (\r\n        postArray.map(post => \r\n        <div key={post.id}>\r\n            <PostCard text={post.text} userId={post.user_id} userArray={userArray}/>\r\n        </div>    \r\n        )\r\n    )\r\n}\r\n\r\nexport default Post;","import React, {useState, useEffect} from 'react';\r\nimport { Route } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport './App.css';\r\nimport { Link } from 'react-router-dom';\r\nimport Users from './components/User';\r\nimport Post from './components/Post';\r\n\r\nconst baseUrl = process.env.NODE_ENV === 'development' ? 'http://localhost:4000' : ''\r\n\r\nfunction App() {\r\n  const [userArray, setUserArray] = useState([])\r\n\r\n  const getUsers = () => {\r\n    axios.get(baseUrl + '/api/users')\r\n    .then(res => {\r\n        setUserArray(res.data)\r\n    })\r\n    .catch(error => {\r\n        console.log(error.message)\r\n    })\r\n  }\r\n\r\n  useEffect(() => {\r\n    getUsers()\r\n  }, [])\r\n\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div>\r\n        <Link to ={'/'}>Users</Link>\r\n        <Link to ={'/posts'}>Posts</Link>\r\n      </div>\r\n      <Route exact path=\"/\" render={(props) => <Users {...props} userArray={userArray} getUsers={getUsers}/>}/>\r\n      <Route path=\"/posts\" render={(props) => <Post {...props} userArray={userArray} getUsers={getUsers}/>}/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {BrowserRouter as Router} from 'react-router-dom';\r\n\r\nReactDOM.render(<Router>\r\n    <App />\r\n    </Router>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}